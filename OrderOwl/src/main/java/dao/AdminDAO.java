package dao;

import dto.*;
import util.DbUtil;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import dto.AdminDTO.*;

/**
 * Í¥ÄÎ¶¨Ïûê DAO - Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ëÍ∑º
 * Properties ÌååÏùºÏóêÏÑú ÏøºÎ¶¨Î•º Î°úÎìúÌïòÏó¨ ÏÇ¨Ïö©
 */
public class AdminDAO {
    
    private Properties queries;
    
    /**
     * ÏÉùÏÑ±Ïûê - Properties ÌååÏùº Î°úÎìú
     */
    public AdminDAO() {
        queries = new Properties();
        loadQueries();
    }
    
    /**
     * Properties ÌååÏùºÏóêÏÑú ÏøºÎ¶¨ Î°úÎìú
     */
    private void loadQueries() {
        InputStream is = null;
        
        try {
            // Î∞©Î≤ï 1: ÌÅ¥ÎûòÏä§Ìå®Ïä§ÏóêÏÑú Î°úÎìú ÏãúÎèÑ (dbQuery.propertiesÎ°ú Î≥ÄÍ≤Ω)
            is = getClass().getClassLoader().getResourceAsStream("dbQuery.properties");
            
            // Î∞©Î≤ï 2: Ïã§Ìå®ÌïòÎ©¥ ÌîÑÎ°úÏ†ùÌä∏ resources Ìè¥ÎçîÏóêÏÑú Î°úÎìú
            if (is == null) {
                File file = new File("resources/dbQuery.properties");
                if (file.exists()) {
                    is = new FileInputStream(file);
                    System.out.println("üìÇ ÌååÏùº Í≤ΩÎ°úÏóêÏÑú Î°úÎìú: " + file.getAbsolutePath());
                }
            }
            
            // Î∞©Î≤ï 3: OrderOwl/resourcesÏóêÏÑú Î°úÎìú
            if (is == null) {
                File file = new File("OrderOwl/resources/dbQuery.properties");
                if (file.exists()) {
                    is = new FileInputStream(file);
                    System.out.println("üìÇ ÌååÏùº Í≤ΩÎ°úÏóêÏÑú Î°úÎìú: " + file.getAbsolutePath());
                }
            }
            
            // Î∞©Î≤ï 4: ÏÉÅÎåÄ Í≤ΩÎ°ú ../resources
            if (is == null) {
                File file = new File("../OrderOwl/resources/dbQuery.properties");
                if (file.exists()) {
                    is = new FileInputStream(file);
                    System.out.println("üìÇ ÌååÏùº Í≤ΩÎ°úÏóêÏÑú Î°úÎìú: " + file.getAbsolutePath());
                }
            }
            
            // Î∞©Î≤ï 5: src/main/resources (Maven/Gradle Íµ¨Ï°∞)
            if (is == null) {
                File file = new File("src/main/resources/dbQuery.properties");
                if (file.exists()) {
                    is = new FileInputStream(file);
                    System.out.println("üìÇ ÌååÏùº Í≤ΩÎ°úÏóêÏÑú Î°úÎìú: " + file.getAbsolutePath());
                }
            }
            
            if (is == null) {
                throw new IOException("dbQuery.properties ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
            }
            
            queries.load(is);
            System.out.println("‚úÖ AdminDAO ÏøºÎ¶¨ Î°úÎìú ÏôÑÎ£å: " + queries.size() + "Í∞ú");
            
            // ÎîîÎ≤ÑÍ∑∏: Î°úÎìúÎêú Î™®Îì† ÌÇ§ Ï∂úÎ†•
            System.out.println("üìã Î°úÎìúÎêú ÏøºÎ¶¨ ÌÇ§: " + queries.keySet());
            
        } catch (IOException e) {
            System.err.println("‚ùå AdminDAO ÏøºÎ¶¨ Î°úÎìú Ïã§Ìå®!");
            e.printStackTrace();
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    
    /**
     * ÏøºÎ¶¨ Í∞ÄÏ†∏Ïò§Í∏∞
     */
    private String getQuery(String key) {
        String query = queries.getProperty(key);
        if (query == null) {
            System.err.println("‚ùå ÏøºÎ¶¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: " + key);
            System.err.println("üìã ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏøºÎ¶¨ ÌÇ§: " + queries.keySet());
            throw new RuntimeException("ÏøºÎ¶¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: " + key);
        }
        return query;
    }
    
    // ==================== Îß§Ïû• Í¥ÄÎ¶¨ ====================
    
    /**
     * ÏÇ¨ÏóÖÏûêÎ≤àÌò∏ Ï§ëÎ≥µ ÌôïÏù∏
     */
    public boolean existsByBusinessNumber(String businessNumber) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("store.existsByBusinessNumber"));
            pstmt.setString(1, businessNumber);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return false;
    }
    
    /**
     * Îß§Ïû• Îì±Î°ù
     */
    public int insertStore(StoreDTO store) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("store.insert"));
            pstmt.setLong(1, store.getOwnerId());
            pstmt.setString(2, store.getStoreName());
            pstmt.setString(3, store.getBusinessNumber());
            pstmt.setString(4, store.getAddress());
            pstmt.setString(5, store.getPhoneNumber());
            pstmt.setString(6, store.getStatus());
            pstmt.setBoolean(7, store.isBusinessVerified());
            return pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt);
        }
        return 0;
    }
    
    /**
     * Îß§Ïû• ÏóÖÎç∞Ïù¥Ìä∏
     */
    public int updateStore(StoreDTO store) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("store.update"));
            pstmt.setString(1, store.getStoreName());
            pstmt.setString(2, store.getAddress());
            pstmt.setString(3, store.getPhoneNumber());
            pstmt.setString(4, store.getStatus());
            pstmt.setBoolean(5, store.isBusinessVerified());
            pstmt.setLong(6, store.getStoreId());
            return pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt);
        }
        return 0;
    }
    
    /**
     * IDÎ°ú Îß§Ïû• Ï°∞Ìöå
     */
    public StoreDTO selectStoreById(long storeId) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("store.selectById"));
            pstmt.setLong(1, storeId);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                StoreDTO store = new StoreDTO();
                store.setStoreId(rs.getLong("store_id"));
                store.setOwnerId(rs.getLong("owner_id"));
                store.setStoreName(rs.getString("store_name"));
                store.setBusinessNumber(rs.getString("business_number"));
                store.setAddress(rs.getString("address"));
                store.setPhoneNumber(rs.getString("phone_number"));
                store.setStatus(rs.getString("status"));
                store.setBusinessVerified(rs.getBoolean("business_verified"));
                return store;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return null;
    }
    
    /**
     * Îß§Ïû• ÏÉÅÌÉú Î≥ÄÍ≤Ω
     */
    public int updateStoreStatus(long storeId, String status) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("store.updateStatus"));
            pstmt.setString(1, status);
            pstmt.setLong(2, storeId);
            return pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt);
        }
        return 0;
    }
    
    /**
     * ‚úÖ Îß§Ïû• ÏôÑÏ†Ñ ÏÇ≠Ï†ú (ÌïòÎìú ÏÇ≠Ï†ú)
     */
    public int hardDeleteStore(long storeId) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        
        try {
            conn = DbUtil.getConnection();
            String query = "DELETE FROM Store WHERE store_id = ?";
            pstmt = conn.prepareStatement(query);
            pstmt.setLong(1, storeId);
            return pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt);
        }
        return 0;
    }
    
    /**
     * ÎåÄÍ∏∞ Ï§ëÏù∏ Ï£ºÎ¨∏ Í∞úÏàò
     */
    public int countPendingOrders(long storeId) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("store.countPendingOrders"));
            pstmt.setLong(1, storeId);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return 0;
    }
    
    /**
     * QR ÏΩîÎìú Í≤ΩÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
     */
    public void updateStoreQR(long storeId, String qrPath) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("store.updateQR"));
            pstmt.setString(1, qrPath);
            pstmt.setLong(2, storeId);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt);
        }
    }
    
    /**
     * Îß§Ïû• Î©îÎâ¥ Í∞úÏàò
     */
    public int countStoreMenus(long storeId) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("store.countMenus"));
            pstmt.setLong(1, storeId);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return 0;
    }
    
    /**
     * Îß§Ïû• Ï£ºÎ¨∏ Í∞úÏàò
     */
    public int countStoreOrders(long storeId) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("store.countOrders"));
            pstmt.setLong(1, storeId);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return 0;
    }
    
    /**
     * Îß§Ïû• Ï¥ù Îß§Ï∂ú
     */
    public long sumStoreSales(long storeId) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("store.sumSales"));
            pstmt.setLong(1, storeId);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getLong(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return 0;
    }
    
    /**
     * Îß§Ïû• Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
     */
    public boolean existsStoreById(long storeId) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("store.existsById"));
            pstmt.setLong(1, storeId);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return false;
    }
    
    /**
     * Ï†ÑÏ≤¥ Îß§Ïû• Î™©Î°ù Ï°∞Ìöå (StoreRequestÎèÑ Ìè¨Ìï®)
     */
    public List<StoreDTO> selectAllStores() {
        List<StoreDTO> stores = new ArrayList<>();
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("store.selectAll"));
            rs = pstmt.executeQuery();
            while (rs.next()) {
                StoreDTO store = new StoreDTO();
                store.setStoreId(rs.getLong("store_id"));
                store.setOwnerId(rs.getLong("owner_id"));
                store.setStoreName(rs.getString("store_name"));
                store.setBusinessNumber(rs.getString("business_number"));
                store.setAddress(rs.getString("address"));
                store.setPhoneNumber(rs.getString("phone_number"));
                store.setStatus(rs.getString("status"));
                store.setBusinessVerified(rs.getBoolean("business_verified"));
                stores.add(store);
            }
            
            // ‚úÖ PENDING ÏÉÅÌÉúÏùò StoreRequestÎèÑ Ï∂îÍ∞Ä
            List<StoreRequestDTO> pendingRequests = selectPendingStoreRequests();
            for (StoreRequestDTO request : pendingRequests) {
                StoreDTO store = new StoreDTO();
                // requestIdÎ•º ÏùåÏàòÎ°ú Ï†ÄÏû•ÌïòÏó¨ Ïã§Ï†ú storeIdÏôÄ Íµ¨Î∂Ñ
                store.setStoreId(-request.getRequestId()); 
                store.setOwnerId(request.getOwnerId());
                store.setStoreName(request.getStoreName());
                store.setBusinessNumber(request.getBusinessNumber());
                store.setAddress(request.getAddress());
                store.setPhoneNumber(request.getPhoneNumber());
                store.setStatus("PENDING"); // ÎåÄÍ∏∞Ï§ë ÏÉÅÌÉú
                store.setBusinessVerified(false);
                store.setMenuCount(0);
                store.setTotalOrders(0);
                store.setTotalSales(0);
                stores.add(store);
            }
            
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return stores;
    }
    
    /**
     * ‚úÖ ÏÇ≠Ï†ú ÎåÄÍ∏∞ Ï§ëÏù∏ Îß§Ïû• Î™©Î°ù Ï°∞Ìöå
     */
    public List<StoreDTO> selectDeletePendingStores() {
        List<StoreDTO> stores = new ArrayList<>();
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            String query = "SELECT * FROM Store WHERE status = 'DELETE_PENDING' ORDER BY store_id DESC";
            pstmt = conn.prepareStatement(query);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                StoreDTO store = new StoreDTO();
                store.setStoreId(rs.getLong("store_id"));
                store.setOwnerId(rs.getLong("owner_id"));
                store.setStoreName(rs.getString("store_name"));
                store.setBusinessNumber(rs.getString("business_number"));
                store.setAddress(rs.getString("address"));
                store.setPhoneNumber(rs.getString("phone_number"));
                store.setStatus(rs.getString("status"));
                store.setBusinessVerified(rs.getBoolean("business_verified"));
                stores.add(store);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return stores;
    }
    
    // ==================== Ïú†Ï†Ä Í¥ÄÎ¶¨ ====================
    
    /**
     * IDÎ°ú Ïú†Ï†Ä Ï°∞Ìöå
     */
    public UserDTO selectUserById(long userId) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("user.selectById"));
            pstmt.setLong(1, userId);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                UserDTO user = new UserDTO();
                user.setUserId(rs.getLong("user_id"));
                user.setName(rs.getString("name"));
                user.setEmail(rs.getString("email"));
                user.setStatus(rs.getString("status"));
                return user;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return null;
    }
    
    /**
     * Ï†ÑÏ≤¥ Ïú†Ï†Ä Î™©Î°ù Ï°∞Ìöå
     */
    public List<UserDTO> selectAllUsers() {
        List<UserDTO> users = new ArrayList<>();
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("user.selectAll"));
            rs = pstmt.executeQuery();
            while (rs.next()) {
                UserDTO user = new UserDTO();
                user.setUserId(rs.getLong("user_id"));
                user.setName(rs.getString("name"));
                user.setEmail(rs.getString("email"));
                user.setStatus(rs.getString("status"));
                users.add(user);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return users;
    }
    
    /**
     * Ï†ÑÏ≤¥ Ïú†Ï†Ä Ïàò Ï°∞Ìöå
     */
    public int countAllUsers() {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("user.countAll"));
            rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return 0;
    }
    
    /**
     * Ïú†Ï†Ä ÏÉÅÌÉú Î≥ÄÍ≤Ω
     */
    public int updateUserStatus(long userId, String status) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("user.updateStatus"));
            pstmt.setString(1, status);
            pstmt.setLong(2, userId);
            return pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt);
        }
        return 0;
    }
    
    /**
     * Í∞ïÏ†ú ÌÉàÌá¥ Î°úÍ∑∏ Í∏∞Î°ù
     */
    public void insertForceDeleteLog(long userId, String reason) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("user.insertForceDeleteLog"));
            pstmt.setLong(1, userId);
            pstmt.setString(2, reason);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt);
        }
    }
    
    // ==================== Î©îÎâ¥ Í¥ÄÎ¶¨ ====================
    
    /**
     * Î©îÎâ¥ Ï∂îÍ∞Ä
     */
    public int insertMenu(MenuDTO menu) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("menu.insert"));
            pstmt.setLong(1, menu.getStoreId());
            pstmt.setString(2, menu.getMenuName());
            pstmt.setInt(3, menu.getPrice());
            pstmt.setString(4, menu.getCategory());
            pstmt.setString(5, menu.getDescription());
            return pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt);
        }
        return 0;
    }
    
    /**
     * Î©îÎâ¥ ÏóÖÎç∞Ïù¥Ìä∏
     */
    public int updateMenu(MenuDTO menu) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("menu.update"));
            pstmt.setString(1, menu.getMenuName());
            pstmt.setInt(2, menu.getPrice());
            pstmt.setString(3, menu.getCategory());
            pstmt.setString(4, menu.getDescription());
            pstmt.setLong(5, menu.getMenuId());
            return pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt);
        }
        return 0;
    }
    
    /**
     * Î©îÎâ¥ ÏÇ≠Ï†ú
     */
    public int deleteMenu(long menuId) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("menu.delete"));
            pstmt.setLong(1, menuId);
            return pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt);
        }
        return 0;
    }
    
    // ==================== Î©îÎâ¥ ÏöîÏ≤≠ Í¥ÄÎ¶¨ ====================
    
    /**
     * IDÎ°ú Î©îÎâ¥ ÏöîÏ≤≠ Ï°∞Ìöå
     */
    public MenuRequestDTO selectMenuRequestById(long requestId) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("menuRequest.selectById"));
            pstmt.setLong(1, requestId);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                MenuRequestDTO request = new MenuRequestDTO();
                request.setRequestId(rs.getLong("request_id"));
                request.setMenuId(rs.getLong("menu_id"));
                request.setStoreId(rs.getLong("store_id"));
                request.setOwnerId(rs.getLong("owner_id"));
                request.setMenuName(rs.getString("menu_name"));
                request.setPrice(rs.getInt("price"));
                request.setCategory(rs.getString("category"));
                request.setDescription(rs.getString("description"));
                request.setStatus(rs.getString("status"));
                return request;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return null;
    }
    
    /**
     * ÎåÄÍ∏∞ Ï§ëÏù∏ Î©îÎâ¥ ÏöîÏ≤≠ Î™©Î°ù Ï°∞Ìöå
     */
    public List<MenuRequestDTO> selectPendingMenuRequests() {
        List<MenuRequestDTO> requests = new ArrayList<>();
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("menuRequest.selectPending"));
            rs = pstmt.executeQuery();
            while (rs.next()) {
                MenuRequestDTO request = new MenuRequestDTO();
                request.setRequestId(rs.getLong("request_id"));
                request.setMenuId(rs.getLong("menu_id"));
                request.setStoreId(rs.getLong("store_id"));
                request.setOwnerId(rs.getLong("owner_id"));
                request.setMenuName(rs.getString("menu_name"));
                request.setPrice(rs.getInt("price"));
                request.setCategory(rs.getString("category"));
                request.setDescription(rs.getString("description"));
                request.setStatus(rs.getString("status"));
                requests.add(request);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return requests;
    }
    
    /**
     * Î©îÎâ¥ ÏöîÏ≤≠ ÏÉÅÌÉú Î≥ÄÍ≤Ω
     */
    public int approveMenuRequest(long requestId, String status) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("menuRequest.updateStatus"));
            pstmt.setString(1, status);
            pstmt.setLong(2, requestId);
            return pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt);
        }
        return 0;
    }
    
    /**
     * Î©îÎâ¥Í∞Ä ÌôúÏÑ± Ï£ºÎ¨∏Ïóê Ìè¨Ìï®ÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏
     */
    public boolean hasActiveOrdersWithMenu(long menuId) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("menuRequest.hasActiveOrders"));
            pstmt.setLong(1, menuId);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return false;
    }
    
    // ==================== Îß§Ïû• ÏöîÏ≤≠ Í¥ÄÎ¶¨ ====================
    
    /**
     * IDÎ°ú Îß§Ïû• ÏöîÏ≤≠ Ï°∞Ìöå
     */
    public StoreRequestDTO selectStoreRequestById(long requestId) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("storeRequest.selectById"));
            pstmt.setLong(1, requestId);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                StoreRequestDTO request = new StoreRequestDTO();
                request.setRequestId(rs.getLong("request_id"));
                request.setStoreId(rs.getLong("store_id"));
                request.setOwnerId(rs.getLong("owner_id"));
                request.setStoreName(rs.getString("store_name"));
                request.setBusinessNumber(rs.getString("business_number"));
                request.setAddress(rs.getString("address"));
                request.setPhoneNumber(rs.getString("phone_number"));
                request.setStatus(rs.getString("status"));
                return request;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return null;
    }
    
    /**
     * Îß§Ïû• ÏöîÏ≤≠ ÏÉÅÌÉú Î≥ÄÍ≤Ω
     */
    public int approveStoreRequest(long requestId, String status) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("storeRequest.updateStatus"));
            pstmt.setString(1, status);
            pstmt.setLong(2, requestId);
            return pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt);
        }
        return 0;
    }
    
    /**
     * ÎåÄÍ∏∞ Ï§ëÏù∏ Îß§Ïû• ÏöîÏ≤≠ Î™©Î°ù Ï°∞Ìöå
     */
    public List<StoreRequestDTO> selectPendingStoreRequests() {
        List<StoreRequestDTO> requests = new ArrayList<>();
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("storeRequest.selectPending"));
            rs = pstmt.executeQuery();
            while (rs.next()) {
                StoreRequestDTO request = new StoreRequestDTO();
                request.setRequestId(rs.getLong("request_id"));
                request.setStoreId(rs.getLong("store_id"));
                request.setOwnerId(rs.getLong("owner_id"));
                request.setStoreName(rs.getString("store_name"));
                request.setBusinessNumber(rs.getString("business_number"));
                request.setAddress(rs.getString("address"));
                request.setPhoneNumber(rs.getString("phone_number"));
                request.setStatus(rs.getString("status"));
                requests.add(request);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return requests;
    }
    
    // ==================== Îß§Ï∂ú Ï†ïÎ≥¥ ====================
    
    /**
     * Í∏∞Í∞ÑÎ≥Ñ Îß§Ï∂ú Ìï©Í≥Ñ
     */
    public long sumSalesByPeriod(long storeId, LocalDate startDate, LocalDate endDate) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("sales.sumByPeriod"));
            pstmt.setLong(1, storeId);
            pstmt.setDate(2, Date.valueOf(startDate));
            pstmt.setDate(3, Date.valueOf(endDate));
            rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getLong(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return 0;
    }
    
    /**
     * Í∏∞Í∞ÑÎ≥Ñ Ï£ºÎ¨∏ Í∞úÏàò
     */
    public int countOrdersByPeriod(long storeId, LocalDate startDate, LocalDate endDate) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("sales.countOrdersByPeriod"));
            pstmt.setLong(1, storeId);
            pstmt.setDate(2, Date.valueOf(startDate));
            pstmt.setDate(3, Date.valueOf(endDate));
            rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return 0;
    }
    
    /**
     * ÏùºÎ≥Ñ Îß§Ï∂ú Ï°∞Ìöå
     */
    public List<DailySalesDTO> selectDailySales(long storeId, LocalDate startDate, LocalDate endDate) {
        List<DailySalesDTO> dailySales = new ArrayList<>();
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("sales.selectDailySales"));
            pstmt.setLong(1, storeId);
            pstmt.setDate(2, Date.valueOf(startDate));
            pstmt.setDate(3, Date.valueOf(endDate));
            rs = pstmt.executeQuery();
            while (rs.next()) {
                DailySalesDTO sales = new DailySalesDTO();
                sales.setSaleDate(rs.getDate("sale_date").toLocalDate());
                sales.setDailyTotal(rs.getLong("daily_total"));
                dailySales.add(sales);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return dailySales;
    }
    
    /**
     * Î©îÎâ¥Î≥Ñ Îß§Ï∂ú Ï°∞Ìöå
     */
    public List<MenuSalesDTO> selectMenuSales(long storeId, LocalDate startDate, LocalDate endDate) {
        List<MenuSalesDTO> menuSales = new ArrayList<>();
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            pstmt = conn.prepareStatement(getQuery("sales.selectMenuSales"));
            pstmt.setLong(1, storeId);
            pstmt.setDate(2, Date.valueOf(startDate));
            pstmt.setDate(3, Date.valueOf(endDate));
            rs = pstmt.executeQuery();
            while (rs.next()) {
                MenuSalesDTO sales = new MenuSalesDTO();
                sales.setMenuName(rs.getString("menu_name"));
                sales.setTotalQuantity(rs.getInt("total_quantity"));
                sales.setTotalSales(rs.getLong("total_sales"));
                menuSales.add(sales);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return menuSales;
    }
    
    // ==================== ÎåÄÏãúÎ≥¥Îìú ÌÜµÍ≥Ñ ====================
    
    /**
     * ÎåÄÏãúÎ≥¥Îìú ÌÜµÍ≥Ñ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
     */
    public Map<String, Integer> getDashboardStats() {
        Map<String, Integer> stats = new HashMap<>();
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DbUtil.getConnection();
            
            // Ï†ÑÏ≤¥ Îß§Ïû• Ïàò
            pstmt = conn.prepareStatement(getQuery("dashboard.totalStores"));
            rs = pstmt.executeQuery();
            if (rs.next()) stats.put("totalStores", rs.getInt(1));
            
            // Ï†ÑÏ≤¥ Ïú†Ï†Ä Ïàò
            pstmt = conn.prepareStatement(getQuery("dashboard.totalUsers"));
            rs = pstmt.executeQuery();
            if (rs.next()) stats.put("totalUsers", rs.getInt(1));
            
            // ÎåÄÍ∏∞ Ï§ëÏù∏ Îß§Ïû• ÏöîÏ≤≠ Ïàò
            pstmt = conn.prepareStatement(getQuery("dashboard.pendingStoreRequests"));
            rs = pstmt.executeQuery();
            if (rs.next()) stats.put("pendingStoreRequests", rs.getInt(1));
            
            // ÎåÄÍ∏∞ Ï§ëÏù∏ Î©îÎâ¥ ÏöîÏ≤≠ Ïàò
            pstmt = conn.prepareStatement(getQuery("dashboard.pendingMenuRequests"));
            rs = pstmt.executeQuery();
            if (rs.next()) stats.put("pendingMenuRequests", rs.getInt(1));
            
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtil.dbClose(conn, pstmt, rs);
        }
        return stats;
    }
}