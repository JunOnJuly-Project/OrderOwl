#key=query

## user query
# CusQuery
query.order.selectBystoreId=select * from Store where store_id = (select store_id from StoreTable where table_id =?)
query.order.selectMenuBystoreId=select * from Menu where menu_id = ?
query.order.selectAllMenuBystoreId=select * from Menu where store_id = (select store_id from StoreTable where table_id =?)
query.order.insertOrderDetail=insert into OrderDetail value (null,?,?,?,?);
query.order.canOrderCheck=select table_status from OrderTable where table_id=? order by order_id desc limit 1;
query.order.findLastOrderId=select order_id from OrderTable where table_id = ? order by order_id desc limit 1;
query.order.insertNewOrder=insert into OrderTable values (null,?,?,now(),'pending',0,0,'Y')
query.order.findOrderTotalPrice=select total_price from OrderTable where order_id =?;
<<<<<<< HEAD
query.order.updateOrderTotalPrice=update OrderTable set total_price = ? where order_id =?;
=======
query.order.updateOrderTotalPrice=update OrderTable set total_price = ? where order_id =?; 
>>>>>>> f69ecdd18dfca0fffe780960fe1ae89a52e8678a
query.order.selectMenuListByCategoryId =select has_menu_id from category where category_id = ?;
query.order.selectOrderAllOrderByOrderId=select m.menu_name,m.price,o.quantity from OrderDetail o,Menu m where m.menu_id = o.menu_id and order_id = ?;
query.order.selectCategoryBytableNo=select * from category where store_id = (select store_id from StoreTable where table_id = ?);

# menu
user.menu.insert=INSERT INTO Menu (store_id, menu_name, price, description, img_src, category1_code, category2_code, check_rec, order_request, close_time, sold_out) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
user.menu.delete=DELETE FROM Menu WHERE menu_id=?
user.menu.update=UPDATE Menu SET menu_name=?, price=?, description=?, img_src=?, category1_code=?, category2_code=?, check_rec=?, order_request=?, close_time=?, sold_out=? WHERE store_id=? and menu_id=?
user.menu.selectById=SELECT * FROM Menu WHERE menu_id=?;
user.menu.selectAll=SELECT menu_id, store_id, menu_name, price, m.description, m.img_src, category1_code, category2_code, check_rec, order_request, close_time, sold_out FROM Menu as m JOIN Store as s using(store_id) WHERE owner_id=?;

# order
user.order.selectAll=SELECT order_id, store_id, table_id, order_date, status, total_price, min_price, table_status, order_detail_id, menu_id, quantity, price FROM OrderTable JOIN OrderDetail USING(order_id) Join Store USING(store_id) WHERE owner_id=? and status="pending" ORDER BY order_date;
user.order.selectByState=SELECT * FROM OrderTable JOIN OrderDetail USING(order_id) Join Store USING(store_id) WHERE owner_id=? and state=?;
user.order.update=UPDATE OrderTable SET status=? WHERE order_id=?;
user.order.updateTable=UPDATE OrderTable SET table_status='N' WHERE order_id=?;

# store
user.store.join=INSERT INTO Store (owner_id, store_name, address, region, phone_number, description, img_src, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, now());
user.store.quit=DELETE FROM User WHERE user_id=?;
user.store.update=UPDATE Store SET store_name=?, address=?, region=?, phone_number=?, description=?, img_src=? WHERE store_id=?
user.store.select=SELECT * from Store where owner_id=?;

# sales - \uB9E4\uCD9C \uACC4\uC0B0 \uB85C\uC9C1 \uC218\uC815
user.sales.select.year=SELECT YEAR(order_date) AS year, COALESCE(SUM(total_price), 0) as total from OrderTable join Store using(store_id) where owner_id=? and status='completed' group by YEAR(order_date) order by year;
user.sales.select.month=SELECT MONTH(order_date) AS month, COALESCE(SUM(total_price), 0) as total from OrderTable join Store using(store_id) where owner_id=? and status='completed' and YEAR(order_date)=YEAR(CURRENT_DATE) group by MONTH(order_date) order by month;
user.sales.select.week=SELECT WEEK(order_date, 1) AS week, COALESCE(SUM(total_price), 0) as total from OrderTable join Store using(store_id) where owner_id=? and status='completed' and YEAR(order_date)=YEAR(CURRENT_DATE) and MONTH(order_date)=MONTH(CURRENT_DATE) group by WEEK(order_date, 1) order by week;
user.sales.select.day=SELECT DAY(order_date) AS day, COALESCE(SUM(total_price), 0) as total from OrderTable join Store using(store_id) where owner_id=? and status='completed' and YEAR(order_date)=YEAR(CURRENT_DATE) and MONTH(order_date)=MONTH(CURRENT_DATE) and WEEK(order_date, 1)=WEEK(CURRENT_DATE, 1) group by DAY(order_date) order by day;
user.sales.select.hour=SELECT HOUR(order_date) AS hour, COALESCE(SUM(total_price), 0) as total from OrderTable join Store using(store_id) where owner_id=? and status='completed' and YEAR(order_date)=YEAR(CURRENT_DATE) and MONTH(order_date)=MONTH(CURRENT_DATE) and WEEK(order_date, 1)=WEEK(CURRENT_DATE, 1) and DAY(order_date)=DAY(CURRENT_DATE) group by HOUR(order_date) order by hour;
user.sales.select.menu=SELECT m.menu_name AS menu, COALESCE(SUM(od.quantity * od.price), 0) AS total FROM OrderTable ot JOIN OrderDetail od USING(order_id) JOIN Menu m USING(menu_id) JOIN Store s ON ot.store_id = s.store_id WHERE s.owner_id=? AND ot.status='completed' GROUP BY m.menu_id, m.menu_name ORDER BY total DESC;

# auth
user.auth=SELECT * FROM Store WHERE owner_id=?;
user.auth.account=INSERT INTO User (username, password, email, created_at) values (?, ?, ?, now());
user.auth.login=SELECT * FROM User WHERE email=? and password=?;

# table
user.table.create=INSERT INTO StoreTable (store_id, table_no) values (?, ?);
user.table.count=Select Count(*) From StoreTable where store_id=?;
user.table.selectAll=Select * From StoreTable Where store_id=?;
user.table.select=Select * From StoreTable Where table_id=?;

# qr
user.qr.create=INSERT INTO QRCode (table_id, qrcode_data, qr_img_src) values (?, ?, ?);
user.qr.selectAll=Select * From QRCode Join StoreTable using (table_id) where store_id=?;
user.qr.select=Select * From QRCode Where qrcode_id=?

# ==================== AdminDAO Query Properties ====================

# \uB9E4\uC7A5 \uAD00\uB9AC
admin.store.insert=INSERT INTO Store (owner_id, store_name, address, region, phone_number, description, img_src) VALUES (?, ?, ?, ?, ?, ?, ?)
admin.store.update=UPDATE Store SET store_name = ?, address = ?, region = ?, phone_number = ?, description = ?, img_src = ? WHERE store_id = ?
admin.store.delete=DELETE FROM Store WHERE store_id = ?
admin.store.selectById=SELECT store_id, owner_id, store_name, address, region, phone_number, description, img_src, created_at FROM Store WHERE store_id = ?
admin.store.selectAll=SELECT store_id, owner_id, store_name, address, region, phone_number, description, img_src, created_at FROM Store ORDER BY created_at DESC
admin.store.selectByOwnerId=SELECT store_id, owner_id, store_name, address, region, phone_number, description, img_src, created_at FROM Store WHERE owner_id = ? ORDER BY created_at DESC

# \uBA54\uB274 \uAD00\uB9AC
admin.menu.insert=INSERT INTO Menu (store_id, menu_name, price, description, img_src, category1_code, category2_code, check_rec, order_request, close_time, sold_out) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
admin.menu.update=UPDATE Menu SET menu_name = ?, price = ?, description = ?, img_src = ?, category1_code = ?, check_rec = ?, order_request = ?, close_time = ?, sold_out = ? WHERE menu_id = ?
admin.menu.delete=DELETE FROM Menu WHERE menu_id = ?
admin.menu.selectById=SELECT menu_id, store_id, menu_name, price, description, img_src, category1_code, category2_code, check_rec, order_request, close_time, sold_out FROM Menu WHERE menu_id = ?
admin.menu.selectByStoreId=SELECT menu_id, store_id, menu_name, price, description, img_src, category1_code, category2_code, check_rec, order_request, close_time, sold_out FROM Menu WHERE store_id = ? ORDER BY menu_id
admin.menu.checkActiveOrders=SELECT COUNT(*) FROM OrderDetail od JOIN OrderTable o ON od.order_id = o.order_id WHERE od.menu_id = ? AND o.status IN ('pending', 'preparing')

# \uC720\uC800 \uAD00\uB9AC
admin.user.delete=DELETE FROM User WHERE user_id = ?
admin.user.selectById=SELECT user_id, username, password, email, role, created_at FROM User WHERE user_id = ?
admin.user.selectAll=SELECT user_id, username, password, email, role, created_at FROM User ORDER BY created_at DESC

# \uC8FC\uBB38/\uB9E4\uCD9C \uAD00\uB9AC - \uB9E4\uCD9C \uACC4\uC0B0 \uB85C\uC9C1 \uC218\uC815
admin.order.countPending=SELECT COUNT(*) FROM OrderTable WHERE store_id = ? AND status IN ('pending', 'preparing')
admin.order.countByPeriod=SELECT COUNT(*) FROM OrderTable WHERE store_id = ? AND DATE(order_date) BETWEEN ? AND ? AND status = 'completed'
admin.sales.sumByPeriod=SELECT COALESCE(SUM(total_price), 0) FROM OrderTable WHERE store_id = ? AND DATE(order_date) BETWEEN ? AND ? AND status = 'completed'
admin.sales.dailySales=SELECT DATE(order_date) as sale_date, COALESCE(SUM(total_price), 0) as daily_total FROM OrderTable WHERE store_id = ? AND DATE(order_date) BETWEEN ? AND ? AND status = 'completed' GROUP BY DATE(order_date) ORDER BY sale_date
admin.sales.menuSales=SELECT m.menu_name, COALESCE(SUM(od.quantity), 0) as total_quantity, COALESCE(SUM(od.quantity * od.price), 0) as total_sales FROM OrderDetail od JOIN Menu m ON od.menu_id = m.menu_id JOIN OrderTable o ON od.order_id = o.order_id WHERE o.store_id = ? AND DATE(o.order_date) BETWEEN ? AND ? AND o.status = 'completed' GROUP BY m.menu_id, m.menu_name ORDER BY total_sales DESC

# \uD14C\uC774\uBE14/QR \uAD00\uB9AC
admin.table.selectStoreTables=SELECT st.table_id, st.table_no, st.store_id, s.store_name, q.qrcode_id, q.qrcode_data, q.qr_img_src, q.created_at FROM StoreTable st LEFT JOIN Store s ON st.store_id = s.store_id LEFT JOIN QRCode q ON st.table_id = q.table_id WHERE st.store_id = ? ORDER BY st.table_id
admin.table.upsertQR=INSERT INTO QRCode (table_id, qrcode_data, qr_img_src) VALUES (?, ?, ?) ON DUPLICATE KEY UPDATE qrcode_data = VALUES(qrcode_data), qr_img_src = VALUES(qr_img_src), created_at = CURRENT_TIMESTAMP
admin.table.selectById=SELECT st.table_id, st.table_no, st.store_id, s.store_name FROM StoreTable st JOIN Store s ON st.store_id = s.store_id WHERE st.table_id = ?
admin.table.selectQRByTableId=SELECT q.qrcode_id, q.table_id, st.table_no, st.store_id, s.store_name, q.qrcode_data, q.qr_img_src, q.created_at FROM QRCode q JOIN StoreTable st ON q.table_id = st.table_id JOIN Store s ON st.store_id = s.store_id WHERE q.table_id = ?
admin.table.deleteQR=DELETE FROM QRCode WHERE table_id = ?
admin.table.existsQR=SELECT COUNT(*) FROM QRCode WHERE table_id = ?

# \uACB0\uC81C \uAD00\uB9AC
admin.payment.selectAll=SELECT * FROM Payment ORDER BY payment_date DESC
admin.payment.selectById=SELECT * FROM Payment WHERE payment_id = ?
admin.payment.updateStatus=UPDATE Payment SET payment_status = ? WHERE payment_id = ?