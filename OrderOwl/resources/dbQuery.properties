#key=query

## user query

# menu
user.menu.insert=INSERT INTO Menu (store_id, menu_name, price, description, img_src, category1_code, category2_code, check_rec, order_request, close_time, sold_out) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
user.menu.delete=DELETE FROM Menu WHERE menuId=?
user.menu.update=UPDATE SET menu_name=?, price=?, description=?, img_src=?, category1_code=?, category2_code=?, check_rec=?, order_request=?, close_time=?, sold_out=? WHERE store_id=?
user.menu.selectAll=SELECT * FROM Menu WHERE store_id=?;

# order
user.order.selectAll=SELECT * FROM OrderTable JOIN OrderDetail USING(order_id) WHERE store_id=?;
user.order.selectByState=SELECT * FROM OrderTable JOIN OrderDetail USING(order_id) WHERE store_id=? and state=?;
user.order.update=UPDATE SET status=? WHERE order_id=?;

# store
user.store.join=INSERT INTO Store (owner_id, store_name, address, region, phone_number, description, img_src, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, now());
user.store.quit=DELETE FROM Store WHERE store_id=?;
user.store.update=UPDATE SET store_name=?, address=?, region=?, phone_number=?, description=?, img_src=? WHERE store_id=?

# sales
user.sales.select.year=SELECT YEAR(order_date) AS year, sum(total_price) as total from OrderTable where status='completed' group by YEAR(order_date) order by year;
user.sales.select.month=SELECT MONTH(order_date) AS month, sum(total_price) as total from OrderTable where status='completed' and YEAR(order_date)=YEAR(now()) group by MONTH(order_date) order by month;
user.sales.select.day=SELECT DAY(order_date) AS day, sum(total_price) as total from OrderTable where status='completed' and YEAR(order_date)=YEAR(now()) and MONTH(order_date)=MONTH(now()) group by DAY(order_date) order by day;
user.sales.select.hour=SELECT HOUR(order_date) AS hour, sum(total_price) as total from OrderTable where status='completed' and YEAR(order_date)=YEAR(now()) and MONTH(order_date)=MONTH(now()) and DAY(order_date)=DAY(now()) group by HOUR(order_date) order by hour;
user.sales.select.menu=SELECT menu_name AS menu, SUM(m.price) AS total FROM OrderTable JOIN OrderDetail USING(order_id) JOIN Menu AS m USING(menu_id) WHERE status='completed' GROUP BY menu_id order by menu_id;

# auth
user.auth=SELECT * FROM Store WHERE owner_id=?;
query.order.selectBystoreId=select * from store where store_id=1
query.order.selectMenuBystoreId=select * from menu where store_id = 1 limit 1
query.order.selectAllMenuBystoreId=select * from menu where store_id = 1
# AdminDAO Query Properties
# \uB9E4\uC7A5 \uAD00\uB9AC \uCFFC\uB9AC
# \uB9E4\uC7A5 \uAE30\uBCF8 CRUD
store.existsByBusinessNumber=SELECT COUNT(*) FROM Store WHERE business_number = ?
store.insert=INSERT INTO Store (owner_id, store_name, business_number, address, phone_number, status, business_verified) VALUES (?, ?, ?, ?, ?, ?, ?)
store.update=UPDATE Store SET store_name = ?, address = ?, phone_number = ?, status = ?, business_verified = ? WHERE store_id = ?
store.selectById=SELECT * FROM Store WHERE store_id = ?
store.selectAll=SELECT * FROM Store
store.updateStatus=UPDATE Store SET status = ? WHERE store_id = ?
store.updateQR=UPDATE Store SET qr_path = ? WHERE store_id = ?
store.existsById=SELECT COUNT(*) FROM Store WHERE store_id = ?

# \uB9E4\uC7A5 \uD1B5\uACC4
store.countMenus=SELECT COUNT(*) FROM Menu WHERE store_id = ? AND status = 'ACTIVE'
store.countOrders=SELECT COUNT(*) FROM OrderTable WHERE store_id = ?
store.sumSales=SELECT COALESCE(SUM(total_amount), 0) FROM Payment WHERE store_id = ? AND payment_status = 'COMPLETED'
store.countPendingOrders=SELECT COUNT(*) FROM OrderTable WHERE store_id = ? AND status IN ('PENDING', 'CONFIRMED', 'PREPARING')

# \uB9E4\uC7A5 \uC694\uCCAD \uAD00\uB9AC
storeRequest.selectById=SELECT * FROM StoreRequest WHERE request_id = ?
storeRequest.selectPending=SELECT * FROM StoreRequest WHERE status = 'PENDING'
storeRequest.updateStatus=UPDATE StoreRequest SET status = ? WHERE request_id = ?

# \uC720\uC800 \uAD00\uB9AC
user.selectById=SELECT * FROM User WHERE user_id = ?
user.updateStatus=UPDATE User SET status = ? WHERE user_id = ?
user.insertForceDeleteLog=INSERT INTO ForceDeleteLog (user_id, reason, created_at) VALUES (?, ?, NOW())

# \uBA54\uB274 \uAD00\uB9AC
menu.insert=INSERT INTO Menu (store_id, menu_name, price, category, description) VALUES (?, ?, ?, ?, ?)
menu.update=UPDATE Menu SET menu_name = ?, price = ?, category = ?, description = ? WHERE menu_id = ?
menu.delete=UPDATE Menu SET status = 'INACTIVE' WHERE menu_id = ?

# \uBA54\uB274 \uC694\uCCAD \uAD00\uB9AC
menuRequest.selectById=SELECT * FROM MenuRequest WHERE request_id = ?
menuRequest.updateStatus=UPDATE MenuRequest SET status = ? WHERE request_id = ?
menuRequest.hasActiveOrders=SELECT COUNT(*) FROM OrderDetail WHERE menu_id = ? AND order_id IN (SELECT order_id FROM OrderTable WHERE status IN ('PENDING', 'CONFIRMED', 'PREPARING'))

# \uB9E4\uCD9C \uC815\uBCF4
sales.sumByPeriod=SELECT COALESCE(SUM(total_amount), 0) FROM Payment WHERE store_id = ? AND payment_date BETWEEN ? AND ? AND payment_status = 'COMPLETED'
sales.countOrdersByPeriod=SELECT COUNT(*) FROM OrderTable WHERE store_id = ? AND order_date BETWEEN ? AND ?
sales.selectDailySales=SELECT DATE(payment_date) as sale_date, SUM(total_amount) as daily_total FROM Payment WHERE store_id = ? AND payment_date BETWEEN ? AND ? AND payment_status = 'COMPLETED' GROUP BY DATE(payment_date) ORDER BY sale_date
sales.selectMenuSales=SELECT m.menu_name, SUM(od.quantity) as total_quantity, SUM(od.price * od.quantity) as total_sales FROM OrderDetail od JOIN Menu m ON od.menu_id = m.menu_id JOIN OrderTable o ON od.order_id = o.order_id WHERE o.store_id = ? AND o.order_date BETWEEN ? AND ? GROUP BY m.menu_name ORDER BY total_sales DESC

# \uCD94\uAC00 \uCFFC\uB9AC\uB4E4 (\uD544\uC694\uD55C \uACBD\uC6B0)
user.selectAll=SELECT * FROM User
user.countAll=SELECT COUNT(*) FROM User
menu.selectByStoreId=SELECT * FROM Menu WHERE store_id = ? AND status = 'ACTIVE'
menu.countByStoreId=SELECT COUNT(*) FROM Menu WHERE store_id = ? AND status = 'ACTIVE'
order.selectByStoreId=SELECT * FROM OrderTable WHERE store_id = ?
order.countByStoreId=SELECT COUNT(*) FROM OrderTable WHERE store_id = ?
payment.selectByStoreId=SELECT * FROM Payment WHERE store_id = ?
payment.sumByStoreId=SELECT COALESCE(SUM(total_amount), 0) FROM Payment WHERE store_id = ? AND payment_status = 'COMPLETED'

# \uB300\uC2DC\uBCF4\uB4DC \uD1B5\uACC4 \uCFFC\uB9AC
dashboard.totalStores=SELECT COUNT(*) FROM Store WHERE status = 'ACTIVE'
dashboard.totalUsers=SELECT COUNT(*) FROM User WHERE status = 'ACTIVE'
dashboard.pendingStoreRequests=SELECT COUNT(*) FROM StoreRequest WHERE status = 'PENDING'
dashboard.pendingMenuRequests=SELECT COUNT(*) FROM MenuRequest WHERE status = 'PENDING'

# \uBA54\uB274 \uC694\uCCAD \uC0C1\uC138 \uC870\uD68C
menuRequest.selectPending=SELECT * FROM MenuRequest WHERE status = 'PENDING'
menuRequest.selectByStoreId=SELECT * FROM MenuRequest WHERE store_id = ? AND status = 'PENDING'

# \uC8FC\uBB38 \uAD00\uB9AC
order.selectAll=SELECT * FROM OrderTable ORDER BY order_date DESC
order.selectById=SELECT * FROM OrderTable WHERE order_id = ?
order.updateStatus=UPDATE OrderTable SET status = ? WHERE order_id = ?
orderDetail.selectByOrderId=SELECT * FROM OrderDetail WHERE order_id = ?

# \uACB0\uC81C \uAD00\uB9AC
payment.selectAll=SELECT * FROM Payment ORDER BY payment_date DESC
payment.selectById=SELECT * FROM Payment WHERE payment_id = ?
payment.updateStatus=UPDATE Payment SET payment_status = ? WHERE payment_id = ?
